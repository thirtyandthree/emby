define(["exports","./../emby-apiclient/connectionmanager.js","./../loading/loading.js","./globalize.js","./textencoding.js","./servicelocator.js","./appsettings.js"],function(_exports,_connectionmanager,_loading,_globalize,_textencoding,_servicelocator,_appsettings){function showAlert(options){return Emby.importModule("./modules/common/dialogs/alert.js").then(function(alert){return alert(options)})}function showAlertAndResolve(options){return showAlert(options).catch(function(){return Promise.resolve()})}function BaseAppRouter(){}function catchToResolve(err){return Promise.resolve()}function showProfilePinPrompt(instance,apiClient,user){return _loading.default.hide(),options={apiClient:apiClient,user:user},Emby.importModule("./modules/profilepinprompt/profilepinprompt.js").then(function(PinPrompt){return(new PinPrompt).show(options)}).then(function(result){return instance.setPinValidated(user.Id),Promise.resolve(result)});var options}function onChangeToUserErrorPublic(err){return _loading.default.hide(),Promise.reject(err)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,BaseAppRouter.prototype.setPinValidated=function(userId){this._pinValidated=userId},BaseAppRouter.prototype.isPinValidated=function(userId){return this._pinValidated===userId},BaseAppRouter.prototype.showServerLogin=function(options){var apiClient=options.apiClient,instance=this;return console.log("appRouter - showServerLogin: "+apiClient.serverId()),apiClient.getPublicUsersQueryResult({Limit:0}).then(function(result){return result.TotalRecordCount?options.loginType="visual":options.loginType="manual",instance.showServerLogin(options)})},BaseAppRouter.prototype.showEnableProfilePinPrompt=function(options){var user=options.user;return function(options){return Emby.importModule("./modules/common/dialogs/confirm.js").then(function(confirm){return confirm(options)})}({title:_globalize.default.translate("TitleProfilePin"),cancelText:_globalize.default.translate("No"),confirmText:_globalize.default.translate("Yes"),text:_globalize.default.translate("RequireEnteringPinToReturnQuestion")}).then(function(){_appsettings.default.enableProfilePin(user.Id,!0)},function(){_appsettings.default.enableProfilePin(user.Id,!1)})},BaseAppRouter.prototype.authenticateUser=function(options){_loading.default.show();var instance=this,apiClient=_connectionmanager.default.getApiClient(options.serverId);return apiClient.authenticateUserByName(options.username,options.password).then(function(result){return instance.setPinValidated(result.User.Id),(_appsettings.default.enableAutoLogin()&&result.User.Configuration.ProfilePin?(_loading.default.hide(),instance.showEnableProfilePinPrompt({apiClient:apiClient,user:result.User}).catch(catchToResolve)):(_appsettings.default.enableProfilePin(result.User.Id,!1),Promise.resolve())).then(function(){return instance.handleConnectionResult({State:"SignedIn",ApiClient:apiClient},{enableProfilePin:!1})})},function(result){_loading.default.hide(),showAlert({text:_globalize.default.translate("MessageInvalidUser"),title:_globalize.default.translate("HeaderSignInError")})})},BaseAppRouter.prototype.showConnectionErrorAlert=function(result,options){result=null==(result=result.Server)?void 0:result.Name;return showAlertAndResolve({text:_globalize.default.translate("MessageUnableToConnectToServer"),title:result?_globalize.default.translate("TitleUnableToReachName",_textencoding.default.htmlEncode(result)):_globalize.default.translate("TitleUnableToReachServer")})},BaseAppRouter.prototype.handleConnectionResult=function(result,options){switch(console.log("handleConnectionResult: "+(result.State||"")),result.State){case"SignedIn":this.handleSignedInResult(result,options);break;case"ServerSignIn":this.showServerLogin({apiClient:result.ApiClient});break;case"ServerSelection":_servicelocator.appHost.supports("multiserver")?this.showSelectServer():this.showServerLogin({apiClient:_connectionmanager.default.currentApiClient()});break;case"ConnectSignIn":!0===(null==options?void 0:options.useWelcomeForConnectSignIn)?this.showWelcome():this.showConnectLogin();break;case"ServerUpdateNeeded":!1===(null==options?void 0:options.allowServerUpdateNeedAlert)?this.showSelectServer():(_loading.default.hide(),function(instance){showAlertAndResolve({html:_globalize.default.translate("ServerUpdateNeeded",'<a href="https://emby.media">https://emby.media</a>'),text:_globalize.default.translate("ServerUpdateNeeded","https://emby.media")}).then(function(){return instance.showSelectServer()})}(this));break;case"Unavailable":_loading.default.hide(),this.showConnectionErrorAlert(result,options)}},BaseAppRouter.prototype.promptForProfilePin=function(apiClient,userId){var instance=this;return _connectionmanager.default.isLoggedIntoConnect()||!_appsettings.default.enableProfilePin(userId)||this.isPinValidated(userId)?Promise.resolve():apiClient.getUser(userId).then(function(user){return user.Configuration.ProfilePin?showProfilePinPrompt(instance,apiClient,user):Promise.resolve()})},BaseAppRouter.prototype.changeToUser=function(options){var apiClient=options.apiClient,userId=options.userId,serverId=apiClient.serverId(),instance=(_loading.default.show(),this),boundOnError=function(err){_loading.default.hide();var errorName=((null==err?void 0:err.name)||"").toLowerCase(),instance=this.instance,apiClient=(options=this.options).apiClient,options=options.userId;return"forgotpin"!==errorName?Promise.reject(err):apiClient.getUser(options).then(function(user){user.HasPassword?instance.showServerLogin({apiClient:apiClient,username:user.Name,loginType:"manual"}):instance.showServerLogin({apiClient:apiClient})})}.bind({instance:instance,options:options});return _connectionmanager.default.validateCanChangeToUser(apiClient,userId).then(function(){return instance.promptForProfilePin(apiClient,userId).then(function(){return _connectionmanager.default.changeToUser(apiClient,userId).then(function(){var server=_connectionmanager.default.getSavedServers().filter(function(s){return s.Id===serverId})[0];return server?_connectionmanager.default.connectToServer(server,{userId:userId}).then(function(result){switch(_loading.default.hide(),result.State){case"SignedIn":case"ServerUpdateNeeded":return instance.handleConnectionResult(result,{enableProfilePin:!1}),Promise.resolve();default:return Promise.reject(result)}}):Promise.reject("server not found")},boundOnError)},boundOnError)},onChangeToUserErrorPublic)};_exports.default=BaseAppRouter});